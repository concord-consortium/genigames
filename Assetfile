require "rake-pipeline-web-filters"

output "build"

input "app" do
  # Compile Handlebars templates to Javascript
  match "**/*.handlebars" do
    handlebars
  end

  # Compile Coffeescript to Javascript
  match "**/*.coffee" do
    coffee_script
  end

  # Merge all CSS files (inc compiled styl) into genimages.css
  match "**/*.css" do
    concat "css/genigames.css"
  end

  # now run filters on the combined javascript
  match "src/**/*.js" do
    # The minispade helper wraps each JS file in some code to
    # register it with the [minispade](https://github.com/wycats/minispade)
    # module loader.

    minispade :rewrite_requires => true,
              :string => true,
              :module_id_generator => proc { |input|
      # The `:module_id_generator` option customizes the name each file
      # gets registered under. Here we're changing a name like this:
      #    src/vendor/ember.js
      # into:
      #    genigames/vendor/ember
      #
      # So using minispade, we can write:
      #    minispade.require('genigames/vendor/ember');
      # in our JS when we want to load ember.js.
      input.path.sub(/src\//, 'genigames/').sub(/\.js$/, '')
    }

    # After being wrapped in the minispade code, we want to concatenate
    # all the javascript files together.
    concat "js/app.js"
  end

  # Finally, we keep our static assets that don't need any processing
  # in a `static/` directory.
  match "static/**/*" do
    # The block we pass to `concat` lets us adjust the output path
    # of any files it matches. Here we take each input and strip
    # off the `static/` prefix, so `app/static/index.html` ends up
    # in `public/index.html`.
    concat do |input|
      input.sub(/static\//, '')
    end
  end
end